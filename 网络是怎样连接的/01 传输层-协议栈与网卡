01 传输层-协议栈与网卡

0. 旅程指南：协议栈如何处理数据？网络包是怎么发送的？

■ 协议栈(TCP/IP)的内部
I.创建套接字
II.与服务器建立连接
III.收发数据
IV.与服务器断开连接并删除套接字
V.IP与以太网的包收发操作

■ UDP的介绍

★ 小贴士：常见计算机用语英文缩写的全称
   TCP Transmisson Control Protocol     浏览器，邮件等一般应用程序的数据收发用TCP
   UDP User Datagram Protocol			DNS查询等收发较短控制数据时用UDP
   IP  Internet Protocol      ICMP Internet Control Message Protocol（用于告知网络包传送过程中产生的错误以及各种控制消息）
   							  ARP Address Resolution Protocol（用于根据IP地址查询响应的以太网MAC地址）
   PID Process ID（进程标识符，一个进程编号对应一个应用程序）
   MTU Maximum Transmission Unit        MSS Maximum Segment Size      FCS Frame Check Sequence
   
1. TCP（传输控制）协议都被委托了什么？

【调用socket】委托协议栈创建套接字（socket）
首先，协议栈为套接字分配一个供其使用的内存空间（内存管理；为控制信息创建容器）
然后在内存空间中写入"初始状态的控制信息"（因为此时尚未进行数据收发操作，控制信息十分有限），套接字创建完成
接着，将该套接字的描述符告知应用程序（描述符：区分套接字的'号码牌'）
应用程序收到描述符后，向协议栈进行数据收发委托时就要提供该描述符（通过描述符，就能确定对应套接字，从而获取所有通信控制信息）
应用程序中的调用代码例：<描述符> = socket(<使用IPv4>,<使用TCP>,...);

★ 小贴士：socket的本质
   一块存放各种通信控制信息的协议栈内部的内存空间（但其实socket只是一个概念，并不存在实体）
   【控制信息概览】例如：通信对象的IP地址，端口号，通信状态，是否收到响应信息，发送数据后经过了多长时间，等等
   协议栈需要根据这些信息来判断下一步行动，这就是socket的作用（通信指南：建立连接前，都需要知道哪些信息？）
   
【调用connect】委托协议栈建立连接
■ 目的
目的一，明确通信的对象，将对象的IP和端口号告知协议栈（没有明确的对象，就不知道该跟谁收发数据）
目的二，客户端向服务器传达想要开始通信的请求（同上）
目的三，为将要收发的数据分配一块临时存放的内存空间（缓冲区）

■ 实际过程
应用程序中的调用代码例：connect(<描述符>,<服务器的IP地址和端口号P>,...);
创建TCP头部→在TCP头部中通过发送/接收方的端口号找到需要连接的套接字→建立连接，交换头部控制信息，修改状态码
建立连接后，协议栈连接操作结束，控制流程交还应用程序（连接在调用close前一直存在）

★ 小贴士：创建连接的过程常被称作"TCP协议的3次握手"
   客户端发syn+客户端初始序号→服务端回syn+服务端初始序号+ack+服务端确认序号→客户端再发ack+客户端确认序号

★ 小贴士：连接的本质
   通信双方通过套接字"交换控制信息"，然后在套接字中"记录这些必要信息"并准备"收发数据的一连串操作"

★ 小贴士：对控制信息的补充说明
   控制信息分为2类，
   第一类是客户端和服务器互相联络时用于"记录和交换"的控制信息--头部信息（TCP头部，IP头部，MAC头部；建立/断开连接时，网络包只有头部）
   （第一类信息不仅仅是在连接时需要，数据收发以及断开连接过程中都需要，即横跨整个通信过程）
   第二类是保存在套接字中，用于"控制协议栈操作"的信息（收发到的信息，以及收发数据操作的执行状态信息）

【调用write】将想要发送的http请求消息交给协议栈
■ 实际过程
数据收发操作由应用程序调用write开始，write将数据交给协议栈，协议栈收到数据后执行发送

■ 协议栈发送数据时的特点
第一，协议栈不关心应用程序传来的数据内容（这一点很好理解，由于TCP只负责传输控制，故数据内容和长度等等都只由应用程序本身来决定）
第二，协议栈不会收到数据就立刻发送，而是将数据存放在其内部的"缓冲区"，并等待应用程序的下一段数据（收到的数据长度要看应用程序的安排）
第三，协议栈的内部有计时器，每次间隔一段时间就执行1次发送操作（毫秒级单位）

★ 小贴士：1.为什么收到后立刻发送数据不好？
   可能会发送大量小包导致网络效率下降
   2.如果没有计时器，会发生什么？
   可能导致等待时间过长而造成发送延迟，所以即便缓冲区的数据长度达不到MSS，也应该在计时后果断发送出去
   
   以上两者相互制约，要么效率低，要么延迟低，只能权衡（这是协议栈开发者的工作）
   在这样的背景下，只靠协议栈判断发送时机一定有弊端，因此协议栈给应用程序保留了控制发送时机的余地
   应用程序在发送数据时可以指定选项，例如：不等缓冲区填满直接发送（浏览器这样的"会话应用程序"通常这么做）

★ 小贴士：网络包长度MTU和数据长度MSS
   MTU是1个网络包包含头部的总长度（最大长度，IP头+TCP头+MSS），在以太网中长度一般为1500字节
   MSS则是MTU减去TCP头部+IP头部的长度1500-40=1460，是1个网络包所能容纳TCP数据的最大长度
   当应用程序的数据超过或者接近MSS时再发送，就可以避免发送大量小包的问题了

★ 小贴士：当数据较大时需要对网络包进行拆分
   发送缓冲区的数据会被以MSS长度为单位拆分，拆分出来的每块数据都被放入单独的网络包中（分别为每个数据块都加上TCP头部和IP头部）

■ 用序号和确认序号实现TCP的确认/重发功能
